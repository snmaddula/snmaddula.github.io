{"meta":{"title":"snmaddula","subtitle":"my contribution to the community","description":null,"author":"Siva Narayana Reddy","url":"https://snmaddula.github.io"},"pages":[{"title":"about","date":"2018-10-30T03:02:35.941Z","updated":"2018-10-30T03:02:35.941Z","comments":true,"path":"about/index.html","permalink":"https://snmaddula.github.io/about/index.html","excerpt":"","text":"hello buddy"},{"title":"Categories","date":"2018-09-27T04:41:31.000Z","updated":"2018-10-30T03:02:35.945Z","comments":true,"path":"categories/index.html","permalink":"https://snmaddula.github.io/categories/index.html","excerpt":"","text":""},{"title":"","date":"2018-12-16T16:50:27.456Z","updated":"2018-12-16T16:50:27.456Z","comments":true,"path":"tags/index.html","permalink":"https://snmaddula.github.io/tags/index.html","excerpt":"","text":""},{"title":"Listing OpenShift Resources","date":"2018-12-12T10:40:25.907Z","updated":"2018-12-12T10:40:25.907Z","comments":true,"path":"images/git/oc-get.html","permalink":"https://snmaddula.github.io/images/git/oc-get.html","excerpt":"","text":"Let us explore this smart utility oc get to fetch the information about any OpenShift resource. [oc-get]]Listing OpenShift Resources To Be Written"}],"posts":[{"title":"Spring Boot File Download via Angular Service","slug":"spring-boot-file-download-via-angular-service","date":"2019-02-18T06:50:57.000Z","updated":"2019-03-09T20:30:49.549Z","comments":true,"path":"spring-boot-file-download-via-angular-service/","link":"","permalink":"https://snmaddula.github.io/spring-boot-file-download-via-angular-service/","excerpt":"","text":"I. Create a Simple Spring Boot App.As a pre-requisite, we need to implement a service with file download feature. Video guide of the spring-boot process &nbsp;So I composed the below class, which is a complete spring boot application, with file download functionality at its simplest form. 123456789101112131415161718192021222324252627282930package snmaddula.quicktrick.ng;import static java.nio.file.Files.readAllBytes;import static java.nio.file.Paths.get;import javax.servlet.http.HttpServletResponse;import org.springframework.boot.SpringApplication;import org.springframework.boot.autoconfigure.SpringBootApplication;import org.springframework.web.bind.annotation.GetMapping;import org.springframework.web.bind.annotation.RestController;@RestController@SpringBootApplicationpublic class FileDownloadApp &#123; @GetMapping(\"/download\") public void downloadFile(String fileName, HttpServletResponse res) throws Exception &#123; res.setHeader(\"Content-Disposition\", \"attachment; filename=\" + fileName); res.getOutputStream().write(contentOf(fileName)); &#125; private byte[] contentOf(String fileName) throws Exception &#123; return readAllBytes(get(getClass().getClassLoader().getResource(fileName).toURI())); &#125; public static void main(String[] args) &#123; SpringApplication.run(FileDownloadApp.class, args); &#125;&#125; The only dependency that is needed for this boot application is spring-boot-starter-web, add it to your pom.xml 1234&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;&lt;/dependency&gt; For testing purpose, we need some files to be available for download.So place some files in your application classpath under src/main/resources like below: (.xls, .xlsx, .pdf, etc) With this we are done with the server side / spring boot side of the application. Now, let us write the Angular side implementation. II. Preparing the Angular Client1. Create Angular AppUse the below command to create a new angular app with name client.1ng new client --minimal --defaults In case if you see any vulnerabilities reported after the app was created, switch to the client directory and run the below command to let npm fix those issues.1npm audit fix 2. Add File Saver dependencyAdd file-saver dependency to enable saving files to the file-system on the client side.1npm i -s file-saver 3. Create File Download ServiceUse the below command to generate file download service.1ng g s service/file-download 4. Create File Download ComponentUse the below command to generate file download component.1ng g c component/file-download 5. Add HttpClientModule to the application.To be able to use the HttpClient service within your components we first need to include the HttpClientModule in the Angular application.First we need to import HttpClientModule in the application’s root module in the file app.module.ts by adding the below import statement. 1import &#123; HttpClientModule &#125; from '@angular/common/http'; 6. Implement File Download ServiceUpdate file-download.service.ts with the below implementation.12345678910111213141516171819import &#123; Injectable &#125; from '@angular/core';import &#123; HttpClient, HttpParams &#125; from '@angular/common/http';@Injectable(&#123; providedIn: 'root'&#125;)export class FileDownloadService &#123; constructor(private http:HttpClient) &#123; &#125; downloadFile(data) &#123; const REQUEST_PARAMS = new HttpParams().set('fileName', data.fileName); const REQUEST_URL = '/server/download' return this.http.get(REQUEST_URL, &#123; params: REQUEST_PARAMS, responseType: 'arraybuffer' &#125;); &#125;&#125; 7. Implement File Download Component&nbsp;&nbsp;&nbsp;&nbsp;i. Update file-download.component.ts with the below implementation.123456789101112131415161718192021222324252627282930import &#123; Component, OnInit &#125; from '@angular/core';import &#123; FileDownloadService &#125; from '../../service/file-download.service';import &#123; saveAs &#125; from 'file-saver';const MIME_TYPES = &#123; xls : 'application/vnd.ms-excel', xlsx : 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'&#125;;@Component(&#123; selector: 'app-file-download', templateUrl: './file-download.component.html', styleUrls: ['./file-download.component.css']&#125;)export class FileDownloadComponent implements OnInit &#123; constructor(private service:FileDownloadService) &#123; &#125; ngOnInit() &#123; &#125; downloadFile(fileName) &#123; console.log(\"fileName : \" + fileName); const extension = fileName.substr(fileName.lastIndexOf('.') + 1) this.service.downloadFile(&#123;'fileName': fileName&#125;) .subscribe(data =&gt; &#123; saveAs(new Blob([data], &#123; type: MIME_TYPES[extension] &#125;), fileName); &#125;) &#125; &#125; &nbsp;&nbsp;&nbsp;&nbsp;ii. Update file-download.component.html with the below implementation. 123456789&lt;h3&gt;Choose File &lt;/h3&gt;&lt;select #selectedFile&gt; &lt;option value=\"\"&gt;- select -&lt;/option&gt; &lt;option value=\"alpha.xls\"&gt;alpha.xls&lt;/option&gt; &lt;option value=\"alpha.xlsx\"&gt;alpha.xlsx&lt;/option&gt;&lt;/select&gt;&lt;button style=\"margin-left: 30px;\" (click)=\"downloadFile(selectedFile.value)\"&gt;Download&lt;/button&gt; &nbsp;&nbsp;&nbsp;&nbsp;iii. Update app.component.html with the below implementation. 123456&lt;div style=\"text-align:center\"&gt; &lt;h1&gt; File Download Demo &lt;/h1&gt; &lt;app-file-download&gt;&lt;/app-file-download&gt;&lt;/div&gt; 8. Add Proxy Configuration to reach Spring Boot Service.In the root directory of the angular app, create a file proxy.config.json with the below contents.12345678&#123; \"/server\":&#123; \"target\":\"http://localhost:8080\", \"pathRewrite\":&#123; \"^/server\":\"\" &#125; &#125;&#125; The last change we need to make is to tell the Angular server to use the new proxy.Open package.json file and update the start script as below.1\"start\": \"ng serve --proxy-config proxy.config.json\" Now start the app using npm start and navigate to http://localhost:4200.You’ll see a UI similar to the one in the below image.","categories":[],"tags":[{"name":"Angular","slug":"Angular","permalink":"https://snmaddula.github.io/tags/Angular/"},{"name":"Spring Boot","slug":"Spring-Boot","permalink":"https://snmaddula.github.io/tags/Spring-Boot/"}]},{"title":"Spring Boot SAML 2.0 with OKTA","slug":"spring-boot-okta-saml","date":"2019-02-15T02:05:59.000Z","updated":"2019-02-15T02:07:18.330Z","comments":true,"path":"spring-boot-okta-saml/","link":"","permalink":"https://snmaddula.github.io/spring-boot-okta-saml/","excerpt":"","text":"1. Setup Okta Application","categories":[],"tags":[{"name":"Spring Boot","slug":"Spring-Boot","permalink":"https://snmaddula.github.io/tags/Spring-Boot/"},{"name":"OKTA","slug":"OKTA","permalink":"https://snmaddula.github.io/tags/OKTA/"},{"name":"SAML2","slug":"SAML2","permalink":"https://snmaddula.github.io/tags/SAML2/"},{"name":"Spring Security","slug":"Spring-Security","permalink":"https://snmaddula.github.io/tags/Spring-Security/"}]},{"title":"Java Quick Trick - Decode JWT Payload","slug":"decode-jwt-payload","date":"2019-02-11T09:11:09.000Z","updated":"2019-02-11T13:27:51.062Z","comments":true,"path":"decode-jwt-payload/","link":"","permalink":"https://snmaddula.github.io/decode-jwt-payload/","excerpt":"","text":"A quick guide on programmatically decoding a JSON Web Token’s payload. JWT basically consists of three parts separated by dots (.) Header Payload Signing Key The Header basically consists the type of the token which is JWT and the algorithm that is used to sign this token. The second part of the token is the payload, which consists of the claims i.e. the information about the user. The Base64 URL encoded form of the Header and Payload respectively form the 1st and 2nd parts of Json Web Token. Video guide of the process &nbsp;Steps involved:Add commons-codec dependency from Apache in pom.xml12345&lt;dependency&gt; &lt;groupId&gt;commons-codec&lt;/groupId&gt; &lt;artifactId&gt;commons-codec&lt;/artifactId&gt; &lt;version&gt;1.11&lt;/version&gt;&lt;/dependency&gt; 1String token = \"&lt;YOUR JWT TOKEN&gt;\"; Split the token based on period . and extract the payload part from the token.1String payload = token.split(\"\\\\.\")[1]; Use Base64 utility to decode the payload.1String payloadValue = new String (Base64.decodeBase64(payload)); If you want to use a specific charset like UTF-8, you can use the below snippet.12345try &#123; String payloadValue = new String(Base64.decodeBase64(payload), \"UTF-8\");&#125;catch(UnsupportedEncodingException ex) &#123; System.err.println(ex.getMessage());&#125; Note: Make sure to import the Base64 from the package org.apache.commons.codec.binary.Base64.","categories":[],"tags":[{"name":"Quick Trick","slug":"Quick-Trick","permalink":"https://snmaddula.github.io/tags/Quick-Trick/"},{"name":"JWT","slug":"JWT","permalink":"https://snmaddula.github.io/tags/JWT/"},{"name":"Security","slug":"Security","permalink":"https://snmaddula.github.io/tags/Security/"},{"name":"Java","slug":"Java","permalink":"https://snmaddula.github.io/tags/Java/"}]},{"title":"Java Quick Trick - Transform JDBC ResultSet to Excel WorkBook","slug":"resultset-to-excel","date":"2019-02-08T08:01:51.000Z","updated":"2019-02-11T09:09:31.748Z","comments":true,"path":"resultset-to-excel/","link":"","permalink":"https://snmaddula.github.io/resultset-to-excel/","excerpt":"","text":"A quick guide on generating an excel workbook with the output from an SQL query. Video guide of the process &nbsp;Follow the below stepsAdd Apache POI dependencies to your pom.xml 1234567891011&lt;dependency&gt; &lt;groupId&gt;org.apache.poi&lt;/groupId&gt; &lt;artifactId&gt;poi&lt;/artifactId&gt; &lt;version&gt;4.0.1&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;org.apache.poi&lt;/groupId&gt; &lt;artifactId&gt;poi-ooxml&lt;/artifactId&gt; &lt;version&gt;4.0.1&lt;/version&gt;&lt;/dependency&gt; Create a workbook and add the header row.1234try (Workbook book = new XSSFWorkbook()) &#123; Sheet sheet = book.createSheet(); Row header = sheet.createRow(0); &#125; Extract columns from the ResultSet. 12345ResultSetMetaData rsmd = rs.getMetaData();List&lt;String&gt; columns = new ArrayList&lt;String&gt;() &#123;&#123; for (int i = 1; i &lt;= rsmd.getColumnCount(); i++) add(rsmd.getColumnLabel(i));&#125;&#125;; Populate the header row with the extracted column names.1234for (int i = 0; i &lt; columns.size(); i++) &#123; Cell cell = header.createCell(i); cell.setCellValue(columns.get(i));&#125; Extract the rows from the ResultSet and populate the workbook. 123456789int rowIndex = 0;while (rs.next()) &#123; Row row = sheet.createRow(++rowIndex); for (int i = 0; i &lt; columns.size(); i++) &#123; Cell cell = row.createCell(i); // if you have complex values like Date, then use cell formatter. cell.setCellValue(Objects.toString(rs.getObject(columns.get(i)), \"\")); &#125;&#125; Writing the excel workbook to filesystem. 123try (FileOutputStream fos = new FileOutputStream(\"FILE_PATH\")) &#123; book.write(fos); &#125; You can download this entire class - ResultSetToExcel.java, which is readily usable. That’s all. If you have any queries, please do reach out to me via email / phone.","categories":[],"tags":[{"name":"Quick Trick","slug":"Quick-Trick","permalink":"https://snmaddula.github.io/tags/Quick-Trick/"},{"name":"Java","slug":"Java","permalink":"https://snmaddula.github.io/tags/Java/"},{"name":"Apache POI","slug":"Apache-POI","permalink":"https://snmaddula.github.io/tags/Apache-POI/"},{"name":"JDBC","slug":"JDBC","permalink":"https://snmaddula.github.io/tags/JDBC/"}]},{"title":"Tuning JaCoCo for PowerMock Coverage","slug":"tuning-jacoco-for-powermock","date":"2019-01-05T21:07:55.000Z","updated":"2019-01-05T22:08:43.382Z","comments":true,"path":"tuning-jacoco-for-powermock/","link":"","permalink":"https://snmaddula.github.io/tuning-jacoco-for-powermock/","excerpt":"","text":"Jacoco is widely preferred for on-the-fly instrumentation, however it cannot extend the same support when it comes to powermock, as powermockdoes dynamic classfile transformation which conflicts with Jacoco. To overcome this issue, we can use an offline instrumentation i.e. the classes can be pre-instrumented with JaCoCo before powermock kicks in. Configuration StepsHere are the steps involved in configuring Offline Instrumentation of JaCoCo: JaCoCo AgentUnlike with on-the-fly instrumentation offline instrumented classes get a direct dependency on the JaCoCo runtime. Add jacoco-agent dependency to our pom.xml, so that it will be available on the classpath and accessible by the instrumented classes. 123456&lt;dependency&gt; &lt;groupId&gt;org.jacoco&lt;/groupId&gt; &lt;artifactId&gt;org.jacoco.agent&lt;/artifactId&gt; &lt;version&gt;$&#123;jacoco.version&#125;&lt;/version&gt; &lt;classifier&gt;runtime&lt;/classifier&gt;&lt;/dependency&gt; JaCoCo Maven pluginAdd the below plugin configuration to the plugins section of your pom.xml 12345678910111213141516171819202122232425262728293031323334&lt;plugin&gt; &lt;groupId&gt;org.jacoco&lt;/groupId&gt; &lt;artifactId&gt;jacoco-maven-plugin&lt;/artifactId&gt; &lt;version&gt;$&#123;jacoco.version&#125;&lt;/version&gt; &lt;executions&gt; &lt;execution&gt; &lt;id&gt;default-instrument&lt;/id&gt; &lt;goals&gt; &lt;goal&gt;instrument&lt;/goal&gt; &lt;/goals&gt; &lt;/execution&gt; &lt;execution&gt; &lt;id&gt;default-restore-instrumented-classes&lt;/id&gt; &lt;goals&gt; &lt;goal&gt;restore-instrumented-classes&lt;/goal&gt; &lt;/goals&gt; &lt;/execution&gt; &lt;execution&gt; &lt;id&gt;report&lt;/id&gt; &lt;phase&gt;prepare-package&lt;/phase&gt; &lt;goals&gt; &lt;goal&gt;report&lt;/goal&gt; &lt;/goals&gt; &lt;configuration&gt; &lt;dataFile&gt;$&#123;project.build.directory&#125;/coverage.exec&lt;/dataFile&gt; &lt;/configuration&gt; &lt;/execution&gt; &lt;/executions&gt; &lt;configuration&gt; &lt;excludes&gt; &lt;exclude&gt;com/somepack/subpack/**/*&lt;/exclude&gt; &lt;!-- to exclude any package --&gt; &lt;/excludes&gt; &lt;/configuration&gt;&lt;/plugin&gt; Surefire Maven pluginAdd the below configuration to provide coverage information to surefire. 12345678910&lt;plugin&gt; &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt; &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt; &lt;version&gt;2.19.1&lt;/version&gt; &lt;configuration&gt; &lt;systemPropertyVariables&gt; &lt;jacoco-agent.destfile&gt;$&#123;project.build.directory&#125;/coverage.exec&lt;/jacoco-agent.destfile&gt; &lt;/systemPropertyVariables&gt; &lt;/configuration&gt;&lt;/plugin&gt; PowerMock DependenciesAdd the below powermock dependencies to your pom 1234567891011121314151617&lt;dependency&gt; &lt;groupId&gt;org.powermock&lt;/groupId&gt; &lt;artifactId&gt;powermock-api-mockito&lt;/artifactId&gt; &lt;version&gt;$&#123;powermock.version&#125;&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;org.powermock&lt;/groupId&gt; &lt;artifactId&gt;powermock-core&lt;/artifactId&gt; &lt;version&gt;$&#123;powermock.version&#125;&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;org.powermock&lt;/groupId&gt; &lt;artifactId&gt;powermock-module-junit4&lt;/artifactId&gt; &lt;version&gt;$&#123;powermock.version&#125;&lt;/version&gt;&lt;/dependency&gt; Version CompatibilityOne last thing is version Compatibility. Make sure you use compatible versions. For Jacoco Offline Instrumentation, use powermock 1.6.6 or greater. 123&lt;jacoco.version&gt;0.7.7.201606060606&lt;/jacoco.version&gt;&lt;powermock.version&gt;1.7.1&lt;/powermock.version&gt;&lt;junit.version&gt;4.12&lt;/junit.version&gt;","categories":[],"tags":[{"name":"JaCoCo","slug":"JaCoCo","permalink":"https://snmaddula.github.io/tags/JaCoCo/"},{"name":"PowerMock","slug":"PowerMock","permalink":"https://snmaddula.github.io/tags/PowerMock/"},{"name":"JUnit","slug":"JUnit","permalink":"https://snmaddula.github.io/tags/JUnit/"}]},{"title":"Git basics for day to day work","slug":"git-basics-01","date":"2019-01-01T06:42:12.000Z","updated":"2019-02-15T02:03:26.481Z","comments":true,"path":"git-basics-01/","link":"","permalink":"https://snmaddula.github.io/git-basics-01/","excerpt":"","text":"Welcome to Git basics!This is a very basic touch up on everyday git usage.Git is a Distributed Version Control System (DVCS), created by Linus Torvalds, primarily to address collaboration issues. I. CLONE COMMANDS: git clone Clone a repository into a new directory 1$ git clone &lt;URL&gt; Clone a repository into a new custom directory myApp 1$ git clone &lt;URL&gt; myApp Clone a specific branch develop 1$ git clone -b develop &lt;URL&gt; Create a shallow clone with a history truncated to the specified number of commits 1$ git clone &lt;URL&gt; --depth=2 Create a shallow clone with a history after the specified time. 1$ git clone &lt;URL&gt; --shallow-since=yyyy-mm-dd Clone by providing credentials in-line 1$ git clone &lt;protocol&gt;://&lt;username&gt;:password@&lt;domain&gt;/repo-name.git --shallow-since=yyyy-mm-dd In the above example, protocol can be : https, git, ssh, ftp username and password are the credentials that has access to clone this repository. domain is the git host. Ex. github or bitbucket or gitlab, etc. II. CHECKOUT COMMANDS: git checkouyChecking for modifications done in local1$ git status Adding your locally changed files for stagingTo add a specific file: 1$ git add &lt;file-path&gt; To add all the files at once: 123$ git add --all# OR$ git add . Committing the changes to local repository1$ git commit -m 'my commit message' Pushing the changes to remote123$ git push# OR$ git push origin master Pulling the latest changes from remote1$ git pull","categories":[],"tags":[{"name":"Git","slug":"Git","permalink":"https://snmaddula.github.io/tags/Git/"}]},{"title":"Ansible & Ansible Tower (AWX) Lab Setup (PowerShell)","slug":"ansible-awx-magic-lab-setup","date":"2018-12-14T17:19:49.000Z","updated":"2019-01-23T06:02:03.221Z","comments":true,"path":"ansible-awx-magic-lab-setup/","link":"","permalink":"https://snmaddula.github.io/ansible-awx-magic-lab-setup/","excerpt":"","text":"Magic scripts to setup Ansible &amp; Ansible Tower (AWX) Learner’s Lab environment on a personal computer. GOAL : Automate Setup of AWX learner’s lab setup.Tool Stack Git ( with SSH + Linux Utilities) VirtualBox ( for spinning up virtual instances) Vagrant ( for provisioning virtual instances using boxes ) Docker ( for running containers needed by AWX ) ApproachThe series of steps involved in the script are illustrated in the below flow chart. Get StartedTo get started with the setup, download the below steps. AnsibleMagicLab_Pre_Reboot.ps1 AnsibleMagicLab_Post_Reboot.ps1 Launch SequenceOpen Command Prompt in ‘Administrator’ mode.Go to the scripts download location and execute the below command. [1] Pre-Reboot Setuppowershell.exe -ExecutionPolicy Bypass -File AnsibleMagicLab_Pre_Reboot.ps1 On Successful installation of Vagrant, the machine should reboot.Once the machine is up, Open Command Prompt in ‘Administrator’ mode, go to the scripts download location and execute the below command. [1] Post-Reboot Setuppowershell.exe -ExecutionPolicy Bypass -File AnsibleMagicLab_Post_Reboot.ps1 Done that ?Now you’ll be able to access your Ansible Tower (AWX) web interface using the Ip of the Vagrant machine. Open up a browser and provide the IP &lt;IP of AWX Instance&gt; and hit Enter. You’ll get to see a page like below. CREDENTIALS for AWX Loginusername : admin password : password On successful login, you’ll see a dashboard similar to the below one.","categories":[],"tags":[{"name":"Ansible","slug":"Ansible","permalink":"https://snmaddula.github.io/tags/Ansible/"},{"name":"Powershell","slug":"Powershell","permalink":"https://snmaddula.github.io/tags/Powershell/"},{"name":"AWX","slug":"AWX","permalink":"https://snmaddula.github.io/tags/AWX/"}]},{"title":"PowerShell : Enable WinRm on Windows","slug":"ansible-winrm-windows","date":"2018-12-13T00:57:50.000Z","updated":"2018-12-14T20:27:22.733Z","comments":true,"path":"ansible-winrm-windows/","link":"","permalink":"https://snmaddula.github.io/ansible-winrm-windows/","excerpt":"","text":"Step 01Download the PowerShell script provided by Ansible here: ConfigureRemotingForAnsible.ps1 Note: To execute the script, Administrator access is required.Step 02Now, go to the script download location and open the Command Prompt as an ‘Administrator’ and run the following command:1powershell.exe -ExecutionPolicy Bypass -File ConfigureRemotingForAnsible.ps1 -CertValidityDays 100 Note: Ensure that port 5986 is open in firewall rules.That’s all you need, to enable WinRm on windows!","categories":[],"tags":[{"name":"Ansible","slug":"Ansible","permalink":"https://snmaddula.github.io/tags/Ansible/"},{"name":"PowerShell","slug":"PowerShell","permalink":"https://snmaddula.github.io/tags/PowerShell/"},{"name":"WinRm","slug":"WinRm","permalink":"https://snmaddula.github.io/tags/WinRm/"}]},{"title":"Enable / Disable TCP Ports","slug":"open-port-firewall-cmd","date":"2018-12-12T09:23:55.000Z","updated":"2018-12-14T20:25:38.530Z","comments":true,"path":"open-port-firewall-cmd/","link":"","permalink":"https://snmaddula.github.io/open-port-firewall-cmd/","excerpt":"","text":"To enable / disable port accessibility on a machine, we can use the firewall-cmd utility. Note: You need Administrator / sudo access to play around with this utility. Switch to Root Account.1$ sudo su To Install firewalldIf you already have firewall daemon available on your machine, you can skip this. Execute the below command to install firewall daemon1yum install -y firewalld To check status of firewall daemon1firewall-cmd --state You should see running as the result for the above command. Enable TCP PortsTo enable any tcp port say 9090 for example, the command you need to execute is :12firewall-cmd --zone=public --permanent --add-port=9090/tcpfirewall-cmd --reload Enable TCP PortsTo disable any tcp port say 8090 for example, the command you need to execute is :12firewall-cmd --zone=public --permanent --remove-port=8090/tcpfirewall-cmd --reload List open portsTo list publicly accessible ports on the machine, use the below command.12$ firewall-cmd --zone=public --list-ports9090/tcp","categories":[],"tags":[{"name":"Firewall","slug":"Firewall","permalink":"https://snmaddula.github.io/tags/Firewall/"},{"name":"Linux","slug":"Linux","permalink":"https://snmaddula.github.io/tags/Linux/"}]},{"title":"Git + SSH Client Setup","slug":"git-and-ssh-client-setup-windows","date":"2018-12-11T10:31:14.000Z","updated":"2019-02-11T13:33:55.192Z","comments":true,"path":"git-and-ssh-client-setup-windows/","link":"","permalink":"https://snmaddula.github.io/git-and-ssh-client-setup-windows/","excerpt":"","text":"In this article, we shall setup SSH client on Windows machine. What we need ? Git PowerShell (Optional) Command Prompt (Optional) Let us get started with the setup. Silent / UnAttended Install :: Using PowerShellTo download &amp; install git in silent / un-attended mode, execute the below commands123[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12Invoke-WebRequest -Uri https://github.com/git-for-windows/git/releases/download/v2.20.0.windows.1/Git-2.20.0-64-bit.exe -OutFile gitbin.execmd &quot;/C .\\gitbin.exe /SP- /SILENT /NOCANCEL /NORESTART /COMPONENTS=icons,ext\\reg\\shellhere,assoc,assoc_sh&quot; Add git &amp; ssh to your path without closing and re-launching PowerShell.12$env:Path=&quot;$env:Path;C:\\Program Files\\Git\\bin\\;&quot;$env:Path=&quot;$env:Path;C:\\Program Files\\Git\\usr\\bin\\;&quot;","categories":[],"tags":[{"name":"Git","slug":"Git","permalink":"https://snmaddula.github.io/tags/Git/"},{"name":"SSH","slug":"SSH","permalink":"https://snmaddula.github.io/tags/SSH/"},{"name":"Windows","slug":"Windows","permalink":"https://snmaddula.github.io/tags/Windows/"}]},{"title":"Login to OpenShift Origin","slug":"oc-login","date":"2018-12-09T10:24:52.000Z","updated":"2018-12-13T10:43:09.674Z","comments":true,"path":"oc-login/","link":"","permalink":"https://snmaddula.github.io/oc-login/","excerpt":"","text":"There are quite a few ways to login into openshift through the oc cli. Let us explore them one by one. 1. Interactive Login with CredentialsTo Simply login use oc login. This will prompt for username and password, providing which it will authenticate and log you in.123456$ oc loginServer[https://localhost:8443]:username: snmaddulapassword:Login Successful. You can specify the Server URL in-line:1$ oc login https://localhost:8443 2. Non-Interactive Login with Credentials (a.k.a one-liner)To login by providing username and password in-line :1oc login -u=snmaddula -p=secret To instantly switch to a particular namespace / project on successful login :1oc login -u=snmaddula -p=secret -n=project1 In the above examples, -u is short for --username as -p is for --password and -n for --namespace","categories":[],"tags":[{"name":"oc","slug":"oc","permalink":"https://snmaddula.github.io/tags/oc/"},{"name":"openshift","slug":"openshift","permalink":"https://snmaddula.github.io/tags/openshift/"}]},{"title":"JSON Schema enforcement using AVRO","slug":"json-schema-avro","date":"2018-10-01T00:49:33.000Z","updated":"2018-10-30T03:02:35.917Z","comments":true,"path":"json-schema-avro/","link":"","permalink":"https://snmaddula.github.io/json-schema-avro/","excerpt":"","text":"To be added…","categories":[],"tags":[{"name":"JSON","slug":"JSON","permalink":"https://snmaddula.github.io/tags/JSON/"},{"name":"AVRO","slug":"AVRO","permalink":"https://snmaddula.github.io/tags/AVRO/"},{"name":"Kafka","slug":"Kafka","permalink":"https://snmaddula.github.io/tags/Kafka/"}]},{"title":"Orchestrating Spring Boot Microservices with Camunda","slug":"using-camunda-with-spring-boot","date":"2018-09-30T14:31:11.000Z","updated":"2018-10-30T03:02:35.935Z","comments":true,"path":"using-camunda-with-spring-boot/","link":"","permalink":"https://snmaddula.github.io/using-camunda-with-spring-boot/","excerpt":"","text":"STEP 01 : Create a simple orchestration flowHere, I have chosen a simple remittance orchestration, where in few microservices work together in processing a remit request.","categories":[],"tags":[{"name":"Spring Boot","slug":"Spring-Boot","permalink":"https://snmaddula.github.io/tags/Spring-Boot/"},{"name":"Camunda","slug":"Camunda","permalink":"https://snmaddula.github.io/tags/Camunda/"},{"name":"Orchestration","slug":"Orchestration","permalink":"https://snmaddula.github.io/tags/Orchestration/"},{"name":"Microservices","slug":"Microservices","permalink":"https://snmaddula.github.io/tags/Microservices/"}]},{"title":"Wiring Angular with Spring Boot","slug":"wiring-angular-to-spring-boot","date":"2018-09-29T02:53:01.000Z","updated":"2018-10-30T03:02:35.937Z","comments":true,"path":"wiring-angular-to-spring-boot/","link":"","permalink":"https://snmaddula.github.io/wiring-angular-to-spring-boot/","excerpt":"","text":"In this post I am going to share the simplest way to wire an angular front-end to spring boot based back-end application. STEP 01 : Creating a Spring Boot AppOne of the ways that you can get started with Spring Boot is to use the Spring initializer. You can find that at this URL, which is https://start.spring.ioThis tool lets you configure and select different options and then generate a full project that can be up and running once you import it into your IDE. Fill the details as shown in the image and hit Generate Project. The project will get downloaded to your system. Unzip and import the project into your IDE (STS / Eclipse / IntelliJ). Your initial project structure would look similar to this image, after importing into STS. Right click on the NgSpringBootApplication.java and Run As Spring Boot App. Now navigate to your browser and access the link http://localhost:8080 You should see a white label error page as shown below, indicating that your spring app is configured properly and running just fine. STEP 02 : Adding Persistence Layer with a basic modelCreate a model class Alpha in the package alpha.ngspring.ngspringboot.model with the below code.1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556package alpha.ngspring.ngspringboot.model;import java.util.Date;import javax.persistence.Entity;import javax.persistence.Id;import javax.persistence.Table;/** * * @author snmaddula * */@Entity@Table(name = \"ALPHA\")public class Alpha &#123; @Id private Integer id; private String name; private Date dob; private String region; public Integer getId() &#123; return id; &#125; public void setId(Integer id) &#123; this.id = id; &#125; public String getName() &#123; return name; &#125; public void setName(String name) &#123; this.name = name; &#125; public String getRegion() &#123; return region; &#125; public void setRegion(String region) &#123; this.region = region; &#125; public Date getDob() &#123; return dob; &#125; public void setDob(Date dob) &#123; this.dob = dob; &#125;&#125; Create a repository interface AlphaRepo in the package alpha.ngspring.ngspringboot.repo with the below code. 12345678910111213141516package alpha.ngspring.ngspringboot.repo;import org.springframework.data.jpa.repository.JpaRepository;import org.springframework.stereotype.Repository;import alpha.ngspring.ngspringboot.model.Alpha;/** * * @author snmaddula * */@Repositorypublic interface AlphaRepo extends JpaRepository&lt;Alpha, Integer&gt; &#123;&#125; STEP 03 : Adding a REST ControllerCreate a class AlphaController in the package alpha.ngspring.ngspringboot.controller with the below code. 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455package alpha.ngspring.ngspringboot.controller;import java.util.List;import java.util.Optional;import org.springframework.http.HttpStatus;import org.springframework.web.bind.annotation.DeleteMapping;import org.springframework.web.bind.annotation.GetMapping;import org.springframework.web.bind.annotation.PathVariable;import org.springframework.web.bind.annotation.PostMapping;import org.springframework.web.bind.annotation.RequestBody;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.ResponseStatus;import org.springframework.web.bind.annotation.RestController;import alpha.ngspring.ngspringboot.model.Alpha;import alpha.ngspring.ngspringboot.repo.AlphaRepo;/** * * @author snmaddula * */@RestController@RequestMapping(\"/alpha\")public class AlphaController &#123; private AlphaRepo alphaRepo; public AlphaController(AlphaRepo alphaRepo) &#123; this.alphaRepo = alphaRepo; &#125; @GetMapping public List&lt;Alpha&gt; getAllAlpha() &#123; return alphaRepo.findAll(); &#125; @GetMapping(\"&#123;id&#125;\") public Optional&lt;Alpha&gt; getAlphaById(@PathVariable Integer id) &#123; return alphaRepo.findById(id); &#125; @PostMapping public Alpha createAlpha(@RequestBody Alpha alpha) &#123; return alphaRepo.save(alpha); &#125; @DeleteMapping(\"&#123;id&#125;\") @ResponseStatus(HttpStatus.OK) public void deleteAlpha(@PathVariable Integer id) &#123; alphaRepo.deleteById(id); &#125;&#125; Update application.properties entriesUpdate the contents of application.properties as given below. 12345678##### H2 in-memory datasource configuration #####spring.datasource.url=jdbc:h2:mem:alphaspring.datasource.username=saspring.datasource.password=spring.h2.console.enabled=truespring.h2.console.path=/h2 Using the API Endpoint (/alpha)Now let us start the application and see how we can use our REST api. Here I am using Restlet Client extension of Chrome to access our Alpha service. 01 : CREATE ALPHA :: Request &amp; Response 02 : FETCH ALL ALPHA :: Request &amp; Response 03 : DELETE ALPHA :: Request &amp; Response STEP 04 : Create an Angular AppNow let us develop front-end for our Alpha service using Angular. You can simply generate an angular app (provided you have angular-cli installed) using the below command. 1ng new angular-alpha This command would create a directory ‘angular-alpha’ containing fully-featured angular app. You can launch this newly created angular app using the belo command.12cd angular-alphang serve By default the app will start on port 4200.In case if you want to specify a different port, you can specifiy it by using –port flag.1ng serve --port &lt;custom-port&gt; Now, launch your favourite browser and go to the below link.1https://localhost:4200 You’ll be greeted with the Angular Hello page. STEP 05 : Configuring Proxy – routing calls to spring boot appTo get our new Angular app to talk to Spring Boot, we need to set up a proxy. The proxy will forward requests from our ng server running on port 4200 to the Spring Boot server running on port 8080. Proxies are great at overcoming the CORS issues where browsers block JavaScript calls to domains that they weren’t served up from. In the root directory of the angular app, create a file proxy.config.json with the below contents.1234567891011&#123; \"/api\":&#123; \"target\":\"http://localhost:8080\", \"secure\":false, \"changeOrigin\":true, \"logLevel\":\"debug\", \"pathRewrite\":&#123; \"^/api\":\"\" &#125; &#125;&#125; This file tells the ng JavaScript server that if it sees any requests that come into it beginning with /api here on line 2, it should forward them on to localhost:8080 (where our spring app would be listening), which is defined as the target on line 3. The last change we need to make is to tell the Angular server to use the new proxy. Open package.json file and update the start script as below.1\"start\": \"ng serve --proxy-config proxy.config.json\" Now start the app using npm start and navigate to http://localhost:4200/api","categories":[],"tags":[{"name":"Angular","slug":"Angular","permalink":"https://snmaddula.github.io/tags/Angular/"},{"name":"Spring Boot","slug":"Spring-Boot","permalink":"https://snmaddula.github.io/tags/Spring-Boot/"}]}]}